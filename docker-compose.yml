services:
  elasticsearch:
    image: elasticsearch:8.5.3
    volumes:
      - ./esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - "discovery.type=single-node"
    networks:
      - default

  logstash:
    build:
      context: .
      dockerfile: logstash/Dockerfile
    ports:
      - "5228:5228"
      - "9600:9600"
    environment:
      LOGSTASH_PORT: 5228
      LOGSTASH_INDEX: "test-index"
      ELASTIC_HOST: "elasticsearch:9200"
      ELASTIC_USERNAME: "elastic"
      ELASTIC_PASSWORD: "elastic"
    networks:
      - default
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kibana:
    image: kibana:8.5.3
    hostname: kibana
    ports:
      - "5601:5601"
    networks:
      - default
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
    environment:
      ELASTIC_HOST: "http://elasticsearch:9200"
      ELASTIC_USERNAME: "elastic"
      ELASTIC_PASSWORD: "elastic"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://host.docker.internal:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 10

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    networks:
      - default
    volumes:
      - mongodata:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  node_exporter:
    image: prom/node-exporter
    ports:
      - "9100:9100"
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - default
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  storage:
    env_file:
      - storage/.env
    build:
      context: ./storage
      dockerfile: Dockerfile
    depends_on:
      mongo:
        condition: service_healthy
      logstash:
        condition: service_healthy
    ports:
      - "8002:8002"

  receiver:
    env_file:
      - receiver/.env
    build:
      context: ./receiver
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      logstash:
        condition: service_healthy
    ports:
      - "8000:8000"

  filter:
    env_file:
      - filter/.env
    build:
      context: ./filter
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      logstash:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"

  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'

  tsung:
    build:
      context: ./tsung
      dockerfile: Dockerfile
    ports:
      - "8091:8091"
    volumes:
      - ./tsung/config:/tsung/config
      - ./tsung/log:/root/.tsung/log
    command: >
      sh -c "
        echo '[tsung] Running test';
        tsung -f /tsung/config/tsung.xml -k start;
        echo '[tsung] done';
        sleep infinity"

volumes:
  mongodata:
  minio_data:
  shared_tmp: {}

networks:
  elk:
    name: elk
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16