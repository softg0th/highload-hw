// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.29.2
// source: storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StorageService_StreamWithAck_FullMethodName = "/storage.StorageService/StreamWithAck"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	StreamWithAck(ctx context.Context, opts ...grpc.CallOption) (StorageService_StreamWithAckClient, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) StreamWithAck(ctx context.Context, opts ...grpc.CallOption) (StorageService_StreamWithAckClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[0], StorageService_StreamWithAck_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceStreamWithAckClient{ClientStream: stream}
	return x, nil
}

type StorageService_StreamWithAckClient interface {
	Send(*GetMessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type storageServiceStreamWithAckClient struct {
	grpc.ClientStream
}

func (x *storageServiceStreamWithAckClient) Send(m *GetMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceStreamWithAckClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	StreamWithAck(StorageService_StreamWithAckServer) error
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) StreamWithAck(StorageService_StreamWithAckServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamWithAck not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_StreamWithAck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).StreamWithAck(&storageServiceStreamWithAckServer{ServerStream: stream})
}

type StorageService_StreamWithAckServer interface {
	Send(*MessageResponse) error
	Recv() (*GetMessageRequest, error)
	grpc.ServerStream
}

type storageServiceStreamWithAckServer struct {
	grpc.ServerStream
}

func (x *storageServiceStreamWithAckServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceStreamWithAckServer) Recv() (*GetMessageRequest, error) {
	m := new(GetMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWithAck",
			Handler:       _StorageService_StreamWithAck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "storage.proto",
}
